package com.example.mycalendar.feature.schedule.edit

import android.util.Log
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.mycalendar.core.data.model.Activity
import com.example.mycalendar.core.data.repository.ActivityRepository
import com.example.mycalendar.core.data.repository.UserRepository
import com.example.mycalendar.core.data.util.setTimeInfo
import com.example.mycalendar.core.data.util.truncateTimeInfo
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.launch
import javax.inject.Inject

private const val TAG = "ScheduleAddViewModel"

@HiltViewModel
class ScheduleAddViewModel @Inject constructor(
    private val activityRepository: ActivityRepository,
    private val userRepository: UserRepository
) : ViewModel() {
    var scheduleEditUiState by mutableStateOf(ScheduleEditUiState())
        private set

    init {
        viewModelScope.launch {
            val user = userRepository.getCurrentUser()
            onUiStateChange(activity = scheduleEditUiState.activity.copy(createdUser = user))
        }
    }

    // This is stink
    fun onUiStateChange(
        activity: Activity = scheduleEditUiState.activity,
        isAllDay: Boolean = scheduleEditUiState.isAllDay
    ) {
        scheduleEditUiState = scheduleEditUiState.copy(activity = activity, isAllDay = isAllDay)
    }

    suspend fun onActivityAdd() {
        var finalStartTime = scheduleEditUiState.activity.startTime
        var finalEndTime = scheduleEditUiState.activity.takeIf { it.type == "event" }?.endTime

        if (scheduleEditUiState.isAllDay) {
            finalStartTime = finalStartTime!!.truncateTimeInfo()
            finalEndTime = finalEndTime?.setTimeInfo(23, 59)
        }

        val newActivity = scheduleEditUiState.activity.copy(
                startTime = finalStartTime,
                endTime = finalEndTime
        )
        // retrieve autogenerated id from room when adding
        val newId = activityRepository.addLocalActivity(newActivity)
        // change data id before send to firestore
        activityRepository.addRemoteActivity(newActivity.copy(id = newId))
    }
}
